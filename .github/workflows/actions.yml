# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: ["release"]
  pull_request:
    branches: ["release"]

jobs:
  build:
    runs-on:
      windows-latest # For a list of available runner types, refer to
      # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      SOLUTION: CFSDev.sln # Replace with your solution name, i.e. CFSDev.sln.
      DOTNET_VERSION: 6.0.x
      PACKAGES_JSON: .packages.json # Replace with your packages.json fullpath, i.e. .packages.json.
      PACKAGES_ENV_PREFIX: PACKAGES # Replace with your packages.json prefix into environment variables, i.e. PACKAGE.
      PROJECTS_JSON: .projects.json # Replace with your projects.json fullpath, i.e. .projects.json.
      PROJECTS_ENV_PREFIX: PROJECTS # Replace with your projects.json prefix into environment variables, i.e. PROJECT.

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.1

      # Load package.json into steps
      - name: Load package.json into steps
        id: PACKAGES
        uses: notiz-dev/github-action-json-property@release
        with:
          path: "${{env.PACKAGES_JSON}}"
          prop_path: "values"

      - name: List loaded PACKAGES
        run: echo ${{steps.PACKAGES.outputs.propStr}}

      # Load package.json into steps
      - name: Load projects.json into steps
        id: PROJECTS
        uses: notiz-dev/github-action-json-property@release
        with:
          path: "${{env.PROJECTS_JSON}}"
          prop_path: "values"

      - name: List loaded PROJECTS
        run: echo ${{steps.PROJECTS.outputs.propStr}}

      # Execute all unit tests in the solution
      # - name: Execute unit tests
      #  run: dotnet test

      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore the application
        run: msbuild $env:SOLUTION /t:Restore -p:RestorePackagesConfig=true

      # Update all nuget packages in the solution
      - name: Update Nuget packages
        run: Update-Package -ProjectName $env:SOLUTION
